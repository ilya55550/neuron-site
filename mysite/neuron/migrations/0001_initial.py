# Generated by Django 4.0.1 on 2023-04-13 19:49

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ListСompanies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('ticker', models.CharField(db_index=True, max_length=10, unique=True)),
            ],
            options={
                'verbose_name': 'Компания',
                'verbose_name_plural': 'Компании',
                'ordering': ['ticker'],
            },
        ),
        migrations.CreateModel(
            name='NeuralNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(upload_to='networks')),
            ],
            options={
                'verbose_name': 'Нейронная сеть',
                'verbose_name_plural': 'Нейронные сети',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='TrainedNeuralNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_trained_nn', models.FileField(upload_to='harvested_save_model_nn/')),
                ('company', models.CharField(max_length=100, null=True)),
                ('time_step', models.IntegerField(null=True)),
            ],
            options={
                'verbose_name': 'Обученная нейронная сеть',
                'verbose_name_plural': 'Обученные нейронные сети',
            },
        ),
        migrations.CreateModel(
            name='TrainedNeuralNetworkUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator', models.CharField(max_length=100, null=True)),
                ('time_step', models.IntegerField(null=True)),
                ('loss', models.CharField(choices=[('Probabilistic losses', (('binary_crossentropy', 'binary_crossentropy'), ('categorical_crossentropy', 'categorical_crossentropy'), ('sparse_categorical_crossentropy', 'sparse_categorical_crossentropy'), ('poisson', 'poisson'), ('kl_divergence', 'kl_divergence'))), ('Regression losses', (('mean_squared_error', 'mean_squared_error'), ('mean_absolute_error', 'mean_absolute_error'), ('mean_absolute_percentage_error', 'mean_absolute_percentage_error'), ('mean_squared_logarithmic_error', 'mean_squared_logarithmic_error'), ('cosine_similarity', 'cosine_similarity'), ('huber_loss', 'huber_loss'), ('log_cosh', 'log_cosh'))), ('Hinge losses for "maximum-margin" classification', (('hinge', 'hinge'), ('squared_hinge', 'squared_hinge'), ('categorical_hinge', 'categorical_hinge')))], max_length=100)),
                ('optimizer', models.CharField(choices=[('SGD', 'SGD'), ('RMSprop', 'RMSprop'), ('Adam', 'Adam'), ('Adadelta', 'Adadelta'), ('Adadelta', 'Adadelta'), ('Adamax', 'Adamax'), ('Nadam', 'Nadam'), ('Ftrl', 'Ftrl')], max_length=100)),
                ('epochs', models.IntegerField()),
                ('batch_size', models.IntegerField()),
                ('file_trained_nn', models.FileField(upload_to='save_model_nn/%Y/%m/%d/')),
                ('time_create', models.DateTimeField(auto_now_add=True)),
                ('company', models.CharField(max_length=100, null=True)),
                ('neural_network_architecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='neuron.neuralnetwork')),
            ],
            options={
                'verbose_name': 'Пользовательская обученная нейронная сеть',
                'verbose_name_plural': 'Пользовательские обученные нейронные сети',
                'ordering': ['-time_create'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('researcher', models.BooleanField(blank=True, default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
